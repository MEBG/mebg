<erl>
punchcard() ->
   sqlite3:open(main, [{file, "../main.db"}]),
   Vq = "SELECT name, id FROM person ORDER BY id;",
   [_,{_,Vs}] = sqlite3:sql_exec(main,Vq),
   Dq = "select person_id, cast(strftime('%w', datetime(timestamp, 'unixepoch', 'localtime')) as integer) as day_of_week, count(*) as count from presence where present = 1 group by person_id, day_of_week order by person_id, day_of_week;",
   [_,{_,Counts}] = sqlite3:sql_exec(main,Dq),
   sqlite3:close(main),
   [lists:flatten([
      binary_to_list(N),
      ",",
      join([C||{_,C} <-full_row(person_row(P,Counts))], ","),
      10
   ]) || {N,P}<-Vs].

   person_row(Pid, Rows) -> [{D,C}||{P,D,C}<-Rows, P == Pid].

   full_row() -> [{X,0}||X<-lists:seq(1,7)].

   full_row([]) -> full_row();

   full_row([{Rk,Rv}]) -> full_row([{Rk,Rv}], full_row());

   full_row([{Hk,Hv}|T]) -> full_row([{Hk,Hv}|T], full_row()).

   full_row([{Rk,Rv}],List) ->
      Rkc = (Rk+7) rem 8, % sql Sun = 0 / erl Sun = 7
      lists:keyreplace(Rkc, 1, List, {Rkc,Rv});

   full_row([{Hk,Hv}|T], List) ->
      Hkc = (Hk+7) rem 8,
      full_row(T,lists:keyreplace(Hkc, 1, List, {Hkc,Hv})).

   join([H|T],S) ->
      lists:flatten(
         [integer_to_list(H) | [[S,integer_to_list(X)] || X<-T ] ]
      ).

   out(Arg) ->
      {content, "text", [ "Type,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday", 10, punchcard() ]}.
</erl>
